
/**
 * Classe mère du Jeu du loto
 * */
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Thomas Nicolle
 */
public class LeJeuLoto extends javax.swing.JFrame {

    private int option; // options choisis dans l'option du jeu 
    private int nbCol; // nombre de colonnes de la carte 
    private int nbNum; // nombre de numeros sur la carte     
    private boolean carteAchetee; // Pour savoir si l’achat d’au moins une carte par un joueur a été réalisés
    final private int MAX = 90; // nombre max du tirage
    private int boules[]; // pointeur nombres tirés
    LesJoueurs lstJ; // Sert à stocker les joueurs 
    LesJoueurs Gagnants; // liste des gagnants
    LesLots lots; // liste des lots
    Lot lot; // lot à gagner 

    public void initJoueurs() { // Ajoute les deux joueurs de base
        lstJ = new LesJoueurs();
        Joueur jA = new Joueur("Jack"); // Initialisation du joueur 1
        jA.setCouleur(Color.blue);
        jA.setPhoto(new ImageIcon(getClass().getResource("Image/Joueur/jack.png")));
        lstJ.AjoutJoueur(jA); // Ajout du joueur
        Joueur jB = new Joueur("Lara"); // Initialisation du joueur 2
        jB.setCouleur(Color.red);
        jB.setPhoto(new ImageIcon(getClass().getResource("Image/Joueur/Lara.jpg")));
        lstJ.AjoutJoueur(jB);
    }

    public void initButtons() { // Rafraichir les boutons
        JButton b;
        for (int i = 0; i < lstJ.getNbJoueur(); i++) {
            b = (JButton) LesJoueurs.getComponent(i);
            if (b.getText().equals(lstJ.getJoueur(i).getPseudo()) == false) { // Si le pseudo du joueur i n'est pas sur le bouton i
                b.setText(lstJ.getJoueur(i).getPseudo()); // Ecrit le pseudo du joueur sur le pseudo
                b.setBackground(lstJ.getJoueur(i).getCouleur()); // Colorie le bouton avec la couleur du joueur
            }
        }
    }

    public void afficheCartes() { // Afficher les cartes dynamiquements
        int compt = 0;
        JPanel p;
        for (int i = 0; i < lstJ.getNbJoueur(); i++) {
            int nbrCartes = lstJ.getJoueur(i).getMesCartes().getTaille();
            System.out.println(lstJ.getJoueur(i).toString());
            if (nbrCartes == 0) {
                compt += 2;
            }
            if (nbrCartes == 1) {
                p = (JPanel) LesCartons.getComponent(compt + 1);
                lstJ.getJoueur(i).getMesCartes().getCarte(0).dessineCarte(p, lstJ.getJoueur(i).getCouleur());
                compt += 1;
            }
            if (nbrCartes == 2) {
                p = (JPanel) LesCartons.getComponent(compt + 1);
                lstJ.getJoueur(i).getMesCartes().getCarte(0).dessineCarte(p, lstJ.getJoueur(i).getCouleur());
                p = (JPanel) LesCartons.getComponent(compt);
                lstJ.getJoueur(i).getMesCartes().getCarte(1).dessineCarte(p, lstJ.getJoueur(i).getCouleur());
            }
        }
    }

    public void initBoules() { // initialisation pointeur tirage
        for (int i = 0; i < boules.length; i++) {
            boules[i] = 0;
        }
    }

    public void initLesLots() { // Initililisation lots de base
        lots = new LesLots();
        Lot l1 = new Lot("Bon achat Carrefour", 1, 10);
        lots.AjoutLot(l1); // Ajout bon achat 
        Lot l2 = new Lot("Appareil à raclette", 2, new ImageIcon(getClass().getResource("Image/Lot/appraclette.jpg")));
        lots.AjoutLot(l2);
        Lot l3 = new Lot("Voyage en montagne", 3, new ImageIcon(getClass().getResource("Image/Lot/voyage.jpeg")));
        lots.AjoutLot(l3);
    }

    public void initLot(int option) { // Choisir un lot au hasard en fonction de l'option choisie
        int alea;
        do {
            alea = (int) (0 + (Math.random() * (lots.getNbLot() - 0))); // Generation nombre entre 0 et Nombre de lot exclu (-1) car on commence à zero
        } while (lots.getLot(alea).getNiveau() != option); // Sélection auto du lot en fonction de l'option      
        lot = lots.getLot(alea);
        lots.supprimeLot(lots.getLot(alea));
        Cadeau.setText("Cadeau : " + lot.getDescription());
    }

    /**
     * Creates new form LeJeuLoto
     */
    public LeJeuLoto() {
        initComponents();
        initJoueurs();
        initButtons();
        option = 1;
        nbCol = 5;
        nbNum = 15;
        boules = new int[MAX];
        initBoules();
        Gagnants = new LesJoueurs();
        carteAchetee = false;
        initLesLots();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        CENTRE = new javax.swing.JPanel();
        LesCartons = new javax.swing.JPanel();
        j1Carton1 = new javax.swing.JPanel();
        j1Carton2 = new javax.swing.JPanel();
        j2Carton1 = new javax.swing.JPanel();
        j2Carton2 = new javax.swing.JPanel();
        j3Carton1 = new javax.swing.JPanel();
        j3Carton2 = new javax.swing.JPanel();
        j4Carton1 = new javax.swing.JPanel();
        j4Carton2 = new javax.swing.JPanel();
        LesJoueurs = new javax.swing.JPanel();
        j1 = new javax.swing.JButton();
        j2 = new javax.swing.JButton();
        j3 = new javax.swing.JButton();
        j4 = new javax.swing.JButton();
        Cadeau = new javax.swing.JLabel();
        SUD = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Option = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historique = new javax.swing.JTextArea();
        jPanelTirage = new javax.swing.JPanel();
        Tirage = new javax.swing.JButton();
        NbrTirage = new javax.swing.JLabel();
        Stop = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Ajout = new javax.swing.JMenu();
        AjoutJoueur = new javax.swing.JMenuItem();
        AjoutLot = new javax.swing.JMenuItem();
        Action = new javax.swing.JMenu();
        optionsJeu = new javax.swing.JMenuItem();
        afficheLots = new javax.swing.JMenuItem();
        acheterCartes = new javax.swing.JMenuItem();
        runJeu = new javax.swing.JMenuItem();
        resumeJeu = new javax.swing.JMenuItem();
        retryJeu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Le jeu Loto");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Voici les cartes dont vous disposez");
        getContentPane().add(jLabel5, java.awt.BorderLayout.PAGE_START);

        CENTRE.setLayout(new java.awt.BorderLayout());

        LesCartons.setLayout(new java.awt.GridLayout(4, 2));
        LesCartons.add(j1Carton1);
        LesCartons.add(j1Carton2);
        LesCartons.add(j2Carton1);
        LesCartons.add(j2Carton2);
        LesCartons.add(j3Carton1);
        LesCartons.add(j3Carton2);
        LesCartons.add(j4Carton1);
        LesCartons.add(j4Carton2);

        CENTRE.add(LesCartons, java.awt.BorderLayout.CENTER);

        LesJoueurs.setLayout(new java.awt.GridLayout(4, 1));

        j1.setText("Joueur1");
        j1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                j1ActionPerformed(evt);
            }
        });
        LesJoueurs.add(j1);

        j2.setText("Joueur2");
        j2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                j2ActionPerformed(evt);
            }
        });
        LesJoueurs.add(j2);

        j3.setText("Joueur3");
        j3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                j3ActionPerformed(evt);
            }
        });
        LesJoueurs.add(j3);

        j4.setText("Joueur4");
        j4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                j4ActionPerformed(evt);
            }
        });
        LesJoueurs.add(j4);

        CENTRE.add(LesJoueurs, java.awt.BorderLayout.EAST);

        Cadeau.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        Cadeau.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CENTRE.add(Cadeau, java.awt.BorderLayout.SOUTH);

        getContentPane().add(CENTRE, java.awt.BorderLayout.CENTER);

        SUD.setLayout(new java.awt.GridLayout(2, 2));

        jLabel2.setText("Historique du tirage des boules");
        SUD.add(jLabel2);

        Option.setText("Option choisie :");
        SUD.add(Option);

        historique.setColumns(20);
        historique.setRows(5);
        jScrollPane1.setViewportView(historique);

        SUD.add(jScrollPane1);

        jPanelTirage.setLayout(new java.awt.GridLayout(1, 3));

        Tirage.setText("Tirage");
        Tirage.setEnabled(false);
        Tirage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TirageActionPerformed(evt);
            }
        });
        jPanelTirage.add(Tirage);

        NbrTirage.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        NbrTirage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NbrTirage.setText("0");
        jPanelTirage.add(NbrTirage);

        Stop.setText("Arrêter");
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });
        jPanelTirage.add(Stop);

        SUD.add(jPanelTirage);

        getContentPane().add(SUD, java.awt.BorderLayout.SOUTH);

        Ajout.setText("Ajout");

        AjoutJoueur.setText("Joueur");
        AjoutJoueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjoutJoueurActionPerformed(evt);
            }
        });
        Ajout.add(AjoutJoueur);

        AjoutLot.setText("Lot");
        AjoutLot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjoutLotActionPerformed(evt);
            }
        });
        Ajout.add(AjoutLot);

        jMenuBar1.add(Ajout);

        Action.setText("Action");

        optionsJeu.setText("Options Jeu");
        optionsJeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsJeuActionPerformed(evt);
            }
        });
        Action.add(optionsJeu);

        afficheLots.setText("Afficher lots");
        afficheLots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afficheLotsActionPerformed(evt);
            }
        });
        Action.add(afficheLots);

        acheterCartes.setText("Acheter cartes");
        acheterCartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acheterCartesActionPerformed(evt);
            }
        });
        Action.add(acheterCartes);

        runJeu.setText("Démarrer Jeu");
        runJeu.setEnabled(false);
        runJeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runJeuActionPerformed(evt);
            }
        });
        Action.add(runJeu);

        resumeJeu.setText("Continuer");
        resumeJeu.setEnabled(false);
        resumeJeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeJeuActionPerformed(evt);
            }
        });
        Action.add(resumeJeu);

        retryJeu.setText("Recommencer");
        retryJeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retryJeuActionPerformed(evt);
            }
        });
        Action.add(retryJeu);

        jMenuBar1.add(Action);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AjoutLotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjoutLotActionPerformed
        // TODO add your handling code here:
        AjoutLotDlg dlg = new AjoutLotDlg(this, true);
        dlg.setSize(600, 500);
        dlg.setLocation(100, 100);
        dlg.setVisible(true);
        if (dlg.getOk() == true) { // Ajout du lot si validé
            lots.AjoutLot(dlg.getLot());
        }
    }//GEN-LAST:event_AjoutLotActionPerformed

    private void runJeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runJeuActionPerformed
        // TODO add your handling code here:
        if (this.carteAchetee == true) {
            initLot(option); // selection auto du lot à gagné
            Tirage.setEnabled(true);
            runJeu.setEnabled(false);
        }
    }//GEN-LAST:event_runJeuActionPerformed

    private void acheterCartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acheterCartesActionPerformed
        // TODO add your handling code here:
        AchatCarteDlg dlg = new AchatCarteDlg(this, true, lstJ, 3, nbCol, nbNum);
        dlg.setSize(600, 500);
        dlg.setLocation(100, 100);
        dlg.setVisible(true);
        carteAchetee = dlg.getAchat();
        if (carteAchetee == true) {
            afficheCartes();
            runJeu.setEnabled(true);
        }
    }//GEN-LAST:event_acheterCartesActionPerformed

    private void j1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_j1ActionPerformed
        // TODO add your handling code here:
        Joueur j = lstJ.rechJoueur(j1.getText()); // récupération info joueur 
        // appel de la boîte de dialogue de visualisation du joueur, le joueur à décrire dans la boîte de dialogue est passé en 3ème paramètre du constructeur de la boîte de dialogue, il s’agit ici de l’objet j (de type Joueur)
        if (j != null) {
            VisuJoueurDlg dlg1 = new VisuJoueurDlg(this, true, j);
            dlg1.setSize(600, 500);
            dlg1.setLocation(100, 100);
            dlg1.setVisible(true);
        }
    }//GEN-LAST:event_j1ActionPerformed

    private void AjoutJoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjoutJoueurActionPerformed
        // TODO add your handling code here:
        AjoutJoueurDlg dlg = new AjoutJoueurDlg(this, true);
        dlg.setLabelSolde("20.0");
        dlg.setSize(600, 500);
        dlg.setLocation(100, 100);
        dlg.setVisible(true);
        if (dlg.getOk() == true && lstJ.getNbJoueur() <= 3) { // Ajout du joueur si validé
            lstJ.AjoutJoueur(dlg.getJoueur());
            initButtons();
        } else { // Sinon affichage boite de dialogue de type JOptionPane a partir de l'application principal avec message, titre et de type message d'erreur
            JOptionPane.showMessageDialog(this, "Le joueur " + dlg.getJoueur().getPseudo() + " n'a pas été ajouté !", "Trop de joueur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AjoutJoueurActionPerformed

    private void j2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_j2ActionPerformed
        // TODO add your handling code here:
        /////////// TEST ////////////
        JButton b = (JButton) evt.getSource();

        Joueur j = lstJ.rechJoueur(b.getText()); // récupéaration info joueur 
        ////////// TEST ////////////
        // appel de la boîte de dialogue de visualisation du joueur, le joueur à décrire dans la boîte de dialogue est passé en 3ème paramètre du constructeur de la boîte de dialogue, il s’agit ici de l’objet j (de type Joueur)
        if (j != null) { // affiche info du joueur si un joueur est attribué au bouton
            VisuJoueurDlg dlg2 = new VisuJoueurDlg(this, true, j);
            dlg2.setSize(600, 500);
            dlg2.setLocation(100, 100);
            dlg2.setVisible(true);
        }
    }//GEN-LAST:event_j2ActionPerformed

    private void j3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_j3ActionPerformed
        // TODO add your handling code here:
        Joueur j = lstJ.rechJoueur(j3.getText()); // récupéaration info joueur 
        // appel de la boîte de dialogue de visualisation du joueur, le joueur à décrire dans la boîte de dialogue est passé en 3ème paramètre du constructeur de la boîte de dialogue, il s’agit ici de l’objet j (de type Joueur)
        if (j != null) {
            VisuJoueurDlg dlg3 = new VisuJoueurDlg(this, true, j);
            dlg3.setSize(600, 500);
            dlg3.setLocation(100, 100);
            dlg3.setVisible(true);
        }
    }//GEN-LAST:event_j3ActionPerformed

    private void j4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_j4ActionPerformed
        // TODO add your handling code here:
        Joueur j = lstJ.rechJoueur(j4.getText()); // récupéaration info joueur 
        // appel de la boîte de dialogue de visualisation du joueur, le joueur à décrire dans la boîte de dialogue est passé en 3ème paramètre du constructeur de la boîte de dialogue, il s’agit ici de l’objet j (de type Joueur)
        if (j != null) {
            VisuJoueurDlg dlg4 = new VisuJoueurDlg(this, true, j);
            dlg4.setSize(600, 500);
            dlg4.setLocation(100, 100);
            dlg4.setVisible(true);
        }
    }//GEN-LAST:event_j4ActionPerformed

    private void optionsJeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsJeuActionPerformed
        // TODO add your handling code here:
        OptionDlg d = new OptionDlg(this, true, false, nbCol, nbNum);
        d.setVisible(true);
        nbCol = d.getNbCol(); // Récupération des nouvelles valeurs choisis dans la boite de dialogue
        nbNum = d.getNbNum();
        option = d.getChoix();
        if (option == 1) { // Option prend la valeur de l'otpion choisi
            Option.setText("Option choisie : Quine");
        } else if (option == 2) {
            Option.setText("Option choisie : Double Quine");
        } else {
            Option.setText("Option choisie : Carton Plein");
        }
    }//GEN-LAST:event_optionsJeuActionPerformed

    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        // TODO add your handling code here:
        if (Tirage.isEnabled() == true && carteAchetee) { // Pourvoir stop le jeu si déjà commencé
            Tirage.setEnabled(false);
            NbrTirage.setText("");
            historique.append("\n Jeu en pause \n");
        }

    }//GEN-LAST:event_StopActionPerformed

    private void resumeJeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeJeuActionPerformed
        // TODO add your handling code here:
        if (lots.getNbLot() == 0) {
            historique.setText("Plus de lot");
        } else {
            if (option == 1) {
                option = 2;
                initLot(option);
                Option.setText("Option choisie : Double Quine");
                historique.append("\n Reprise du jeu \n");
                Tirage.setEnabled(true);
                runJeu.setEnabled(false);
            } else if (option == 2) {
                option = 3;
                initLot(option);
                Option.setText("Option choisie : Carton Plein");
                historique.append("\n Reprise du jeu \n");
                Tirage.setEnabled(true);
                runJeu.setEnabled(false);
            } else {
                historique.setText("Niveau carton plein atteint");
            }
        }
    }//GEN-LAST:event_resumeJeuActionPerformed

    private void retryJeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retryJeuActionPerformed
        // TODO add your handling code here:
        initBoules(); // reset tirage
        Gagnants = new LesJoueurs(); // reset gagnant de la partie
        for (int i = 0; i < lstJ.getNbJoueur(); i++) { // Reset jetons sur les cartes
            for (int j = 0; j < lstJ.getJoueur(i).getMesCartes().getTaille(); j++) {
                lstJ.getJoueur(i).getMesCartes().getCarte(j).resetJeton();
            }
        }
        JPanel p;
        for (int i = 0; i < LesCartons.getComponentCount(); i++) { // Suppression affichage cartes 
            p = (JPanel) LesCartons.getComponent(i);
            p.removeAll();
        }
        afficheCartes();
        historique.setText("");
        runJeu.setEnabled(false);
        resumeJeu.setEnabled(false);
    }//GEN-LAST:event_retryJeuActionPerformed

    private void afficheLotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afficheLotsActionPerformed
        // TODO add your handling code here:
        VisuLotsDlg dlg = new VisuLotsDlg(this, true, lots);
        dlg.setVisible(true);
    }//GEN-LAST:event_afficheLotsActionPerformed

    private void TirageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TirageActionPerformed
        // TODO add your handling code here:
        boolean b = false; // Indicateur gagant présent
        int nb;
        do {
            nb = 1 + (int) (Math.random() * ((MAX - 1) + 1)); // Génération d'un nombre tirage
        } while (boules[nb - 1] != 0); // Recommence si déjà tiré
        NbrTirage.setText(nb + ""); // Affichage du nombre tiré
        historique.append(nb + " * "); // Ajout dans l'historique le nombre
        boules[nb - 1] = 1; // Indicateur "déja tiré" dans un tableau à l'indice correspondant au nombre
        for (int i = 0; i < lstJ.getNbJoueur(); i++) { // Parcours tous les joueurs
            for (int j = 0; j < lstJ.getJoueur(i).getMesCartes().getTaille(); j++) { // Vérifie toutes les cartes du joueur
                if (lstJ.getJoueur(i).getMesCartes().getCarte(j).estDans(nb) == true) { // si un joueur, au moins possède ce numéro dans une carte
                    b = true;
                    lstJ.getJoueur(i).getMesCartes().getCarte(j).placePion(nb);
                    afficheCartes();
                }
            }
        }
        if (b == true) {
            for (int i = 0; i < lstJ.getNbJoueur(); i++) {  // recherche tous les joueurs qui ont un carton gagnant
                for (int j = 0; j < lstJ.getJoueur(i).getMesCartes().getTaille(); j++) {
                    if (lstJ.getJoueur(i).getMesCartes().getCarte(j).cartonGagnant(option)) { // Les joueurs gagnants sont ajoutés à une collection
                        b = true;
              
                        if (Gagnants.rechJoueur(lstJ.getJoueur(i).getPseudo()) == null) { // evite doublon quand deux cartes sont gagnantes
                            Gagnants.AjoutJoueur(lstJ.getJoueur(i));
                            Tirage.setEnabled(false);
                            Stop.setEnabled(false);
                            resumeJeu.setEnabled(true);
                        }
                        switch (option) { // message Queen, Double Queene, ou Carton plein (selon l’option de jeu)
                            case 1 ->
                                historique.append("\n" + lstJ.getJoueur(i).getPseudo() + " a réalisé un Queen \n");
                            case 2 ->
                                historique.append("\n" + lstJ.getJoueur(i).getPseudo() + " a réalisé un Double Queen \n");
                            default ->
                                historique.append("\n" + lstJ.getJoueur(i).getPseudo() + " a réalisé un Carton plein \n");
                        }
                    }
                }
            }
            // si gagants
            if (b) {
                if (Gagnants.getNbJoueur() >= 2) {
                    int alea = 1 + (int) (Math.random() * ((Gagnants.getNbJoueur() - 1) + 1));
                    System.out.println("Alea=" + alea);
                    historique.append(lstJ.getJoueur(alea) + " a gagné le tirage au sort \n");
                    lstJ.getJoueur(alea).getMesLots().AjoutLot(lot);
                    historique.append("--- Partie terminée --- \n");
                    JOptionPane.showMessageDialog(this, lstJ.getJoueur(alea).getPseudo() + " à remporté: " + lot.getDescription(), "Fin de la partie", JOptionPane.INFORMATION_MESSAGE);
                } else if (Gagnants.getNbJoueur() == 1) {
                    Joueur g = Gagnants.getJoueur(0);
                    g.getMesLots().AjoutLot(lot);
                    historique.append("--- Partie terminée --- \n");
                    JOptionPane.showMessageDialog(this, g.getPseudo() + " à remporté: " + lot.getDescription(), "Fin de la partie", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_TirageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeJeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeJeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeJeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeJeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeJeuLoto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Action;
    private javax.swing.JMenu Ajout;
    private javax.swing.JMenuItem AjoutJoueur;
    private javax.swing.JMenuItem AjoutLot;
    private javax.swing.JPanel CENTRE;
    private javax.swing.JLabel Cadeau;
    private javax.swing.JPanel LesCartons;
    private javax.swing.JPanel LesJoueurs;
    private javax.swing.JLabel NbrTirage;
    private javax.swing.JLabel Option;
    private javax.swing.JPanel SUD;
    private javax.swing.JButton Stop;
    private javax.swing.JButton Tirage;
    private javax.swing.JMenuItem acheterCartes;
    private javax.swing.JMenuItem afficheLots;
    private javax.swing.JTextArea historique;
    private javax.swing.JButton j1;
    private javax.swing.JPanel j1Carton1;
    private javax.swing.JPanel j1Carton2;
    private javax.swing.JButton j2;
    private javax.swing.JPanel j2Carton1;
    private javax.swing.JPanel j2Carton2;
    private javax.swing.JButton j3;
    private javax.swing.JPanel j3Carton1;
    private javax.swing.JPanel j3Carton2;
    private javax.swing.JButton j4;
    private javax.swing.JPanel j4Carton1;
    private javax.swing.JPanel j4Carton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanelTirage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem optionsJeu;
    private javax.swing.JMenuItem resumeJeu;
    private javax.swing.JMenuItem retryJeu;
    private javax.swing.JMenuItem runJeu;
    // End of variables declaration//GEN-END:variables
}
